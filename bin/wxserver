#!/usr/bin/env node
var RestWrapper = require('rest-wrapper');
var path = require('path');
var config = require('../hub/config') || {};
var serverConfig = config.server || {};
var msg = require('../rest/msg');
var debug = require('../utils/debug');
var serverKey = serverConfig.token || config.skey || config.serverKey;
global.serverKey = serverKey;
debug.enable(config.debug);

function setup(app){
  app.use(function*(next){
    debug(this.method, this.path);
    if ( this.path == '/') {
      var query = this.query || {};
      if ( query.signature && query.nonce && query.timestamp && this.method == 'GET' ) {
        var crypto = require('crypto');
        var token = global.serverKey;
        var key=[token,query.timestamp,query.nonce].sort().join('');
        var signature = crypto.createHash('sha1').update(key).digest('hex');
        if ( signature != query.signature ) {
          console.error('signature verify failed, please check token!');
          this.throw('signature verify failed, please check token!');
        }
        this.body = query.echostr;
        console.log('Server is configured successfully!');
        return;
      }
    }
    if ( typeof ( this.request.body ) == 'string' ) {
      var args = yield msg.parse(this.request.body);
      var value = yield msg.recv(args, this);
      if ( typeof(value) == 'object' ) {
        var xml = yield msg.build(value);
        this.type = 'application/xml';
        this.body = xml;
        return;
      }
      else if ( value ) {
        this.body = value;
        return;
      }
    }
    yield* next;
  });
}

var restConfig = {
  docs: true,
  setup: setup,
  http: {
    static: path.join(__dirname, '../www'),
    bodyParser: {
      enableTypes: ['json', 'form', 'text'],
      extendTypes: {
        text: ['text/xml', 'application/xml']
      },
      onerror: function(err){
        console.error('parse body error', err);
      }
    }
  },
  port: serverConfig.port || process.env.WX_PORT || 3000
}

var server = RestWrapper(restConfig);
server.route(path.join(__dirname, '../rest'));
